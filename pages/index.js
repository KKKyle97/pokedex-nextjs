import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import axios from "axios";
import { useState, useEffect, useCallback, useMemo } from "react";
import { Card, Container, Row, Col } from "react-bootstrap";
import { useRouter } from "next/router";
import search from "./api/search";
import styles from "../components/index.module.css";

export default function Home() {
  const pokemonType = [
    "None",
    "Grass",
    "Fire",
    "Water",
    "Bug",
    "Flying",
    "Poison",
    "Normal",
    "Electric",
    "Ground",
    "Fairy",
    "Fighting",
    "Psychic",
    "Rock",
    "Steel",
    "Ice",
    "Ghost",
    "Dark",
    "Dragon",
  ];
  const [pokedex, setPokedex] = useState([]);
  const [query, setQuery] = useState({ pokeName: "", pokeType: "" });
  const [pokedexLength, setpokedexLength] = useState(0);
  const router = useRouter();

  const handlePokedex = (data) => {
    setPokedex(data);
    console.log("after set state");
  };

  const searchPokemon = async () => {
    const allPokemons = await axios.get(
      `http://localhost:3000/api/search?name=${query.pokeName}&type=${query.pokeType}`
    );
    const pokemonsWithImage = allPokemons.data.map((pokemon) => ({
      ...pokemon,
      image: `/images/${calculateNumber(pokemon.id)}.png`,
    }));
    handlePokedex(pokemonsWithImage);
  };

  const calculateNumber = (number) => {
    let convertedNumber = 0;
    if (number / 10 < 1) convertedNumber = `00${number}`;
    else if (number / 10 >= 10) convertedNumber = number;
    else convertedNumber = `0${number}`;
    return convertedNumber;
  };

  const handleChange = ({ name, value }) => {
    let tempQuery = {
      ...query,
    };

    tempQuery[name] = value;
    setQuery(tempQuery);
  };

  useEffect(async () => {
    const pokemons = await axios.get("http://localhost:3000/api/search");
    const pokemonsWithImage = pokemons.data.map((pokemon) => ({
      ...pokemon,
      image: `/images/${calculateNumber(pokemon.id)}.png`,
    }));
    setPokedex(pokemonsWithImage);
    setpokedexLength(pokemons.data.length);
    console.log("initialization");
  }, []);

  useEffect(() => {
    searchPokemon();
    console.log("search useEffect");
  }, [query.pokeName, query.pokeType]);

  return (
    <div className="container">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <Row>
          <Col className={styles.title}>Simple Pokedex</Col>
        </Row>
        <Row>
          <Col xs={10} className={styles.searchBar}>
            <label className={styles.searchLabel}>
              Search Pokemon Name:
              <input
                className={styles.searchInput}
                name="pokeName"
                onChange={(e) => handleChange(e.currentTarget)}
              />
            </label>
            {pokedex.length === pokedexLength && query.pokeName !== ""
              ? "No Pokemon Matched"
              : `${pokedex.length} pokemon found`}
          </Col>
          <Col xs={2} className={styles.sortBar}>
            <select
              name="pokeType"
              onChange={(e) => handleChange(e.currentTarget)}
            >
              {pokemonType.map((type) => (
                <option value={type === "None" ? "" : type} key={type}>
                  {type}
                </option>
              ))}
            </select>
          </Col>
        </Row>

        <Row>
          {pokedex.map((pokemon) => (
            <Col xs={4} key={pokemon.id} style={{ padding: 5 }}>
              <Card
                onClick={() => {
                  router.push({
                    pathname: "/pokemon/[name]",
                    query: { name: pokemon.name.english },
                  });
                }}
              >
                <Card.Img src={pokemon.image} />
                <Card.Body>
                  <Card.Title>{pokemon.name.english}</Card.Title>
                  <Card.Text>{`${pokemon.type[0]} ${
                    pokemon.type[1] ?? ""
                  }`}</Card.Text>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
    </div>
  );
}
